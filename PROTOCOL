PROTOCOL (server prespective):
    - Listen on port 9999 (temporary)
    - Receive request message (connection type)
    - if rejected: reply "CONNECTION_REJECTED"; end session
    - create appropriate object of connection type


PROTOCOL (participant perspective):
    - Create a TCP connection to server
    - send "TEXT_EDITOR_TOURNAMENT_TYPE_PARTICIPANT"
    - await feedback:
        if not "CONNECTION_ACCEPTED", end session
    - send <user name>
    - send <user editor>
    - main "loop":
        -----
         top
        -----
        receive "CHALLENGE_INITIATE"
        receive challenge number (id)
        receive challenge name
        receive number of lines in description (n)
        receive challenge description (n lines)
        -----
         print info
         Ask user to accept or reject challenge
        -----
        if user rejects:
            send "CHALLENGE_REJECTED"
            -----
             return (back to main loop)
            -----
        else:
            send "CHALLENGE_ACCEPTED"
            -----
             wipe working directory
             standby (wait for files)
            -----
            - receive "FILE_TRANSMISSION_BEGIN"
            - while "SEND_FILE_BEGIN", do:
                - receive file name
                - receive number of lines (n)
                - for each line (i<n), receive line
                    - write file into working directory
            - receive "FILE_TRANMISSION_END"
              -----
       (1) ->  standby (wait for user to complete challenge or forfiet)
               receive user message (from standard input)
              -----
            - if user forfeit:
                - send "CHALLENGE_FORFEIT"
            /// TODO - elif user reset:
            /// TODO    - send "CHALLENGE_RESET"
            - else:
                - send "CHALLENGE_SUBMISSION"
                - send challenge number (id)
                - send "FILE_TRANSMISSION_BEGIN"
                - while has file, do:
                    - send "SEND_FILE_BEGIN"
                    - send file name
                    - send number of lines (n)
                    - for each line (i<n), send line
                - send "FILE_TRANMISSION_END"
                - if receive "CHALLENGE_RESULTS_INCORRECT":
                    - receive number of lines in diff (n lines)
                    - receive diff report (n lines)
                    *GOTO (1)
                - else receive "CHALLENGE_RESULTS_CORRECT"
              -----
               standby (wait for challenge to finish)
              -----
            - receive "CHALLENGE_COMPLETE"
            - receive overall rank (#x of n competitors)
            - receive time it took you to complete
            - receive average completion time
            - recieve editor rank (#x of n on team txt_editor_here)
            - receive average completion time for all editors
            - receive "BEST_EDITOR_TIME_START", do:
                - receive best time editor
                - receive best time value
                - receive best time user
            - while not receive "BEST_EDITOR_TIME_END"
          -----
           return to top
          -----


PROTOCOL (manager perspective):
    - Create a TCP connection to server
    - send "TEXT_EDITOR_TOURNAMENT_TYPE_MANAGER"
    - await feedback:
        if not "CONNECTION_ACCEPTED", end session
      -----
(1) -> from user input wait for challenge selection
       > send 1 challenge1
      -----
    - send "CHALLENGE_SEND_BEGIN"
    - if receive "CHALLENGE_REJECTED":
        print("Server rejected challenge (another challenge is in progress)")
        GOTO (1)
    - else receive "CHALLENGE_ACCEPTED":
        - send challenge number (id)
        - send challenge name
        - send number of lines in description (n)
        - send challenge description (n lines)
        - send "FILE_TRANSMISSION_BEGIN"
        - while has file, do:
            - send "SEND_FILE_BEGIN"
            - send file name
            - send number of lines (n)
            - for each line (i<n), send line
        - send "FILE_TRANMISSION_END"
    - if not receive "CHALLENGE_OKAY":
        GOTO (1)
        
      -----
       from user input wait for start challenge command
       > start
      -----
    - send "CHALLENGE_START"
    - receive:
        - "CHALLENGE_FINISH": done, goto command
        - "CHALLENGE_NOT_FOUND": print error
        - "CHALLENGE_ERROR"


Data sending:
    Data is sent as bytes as characters.

Send on request:
    Client:
        TEXT_EDITOR_TOURNAMENT_TYPE_PARTICIPANT
    Manager:
        TEXT_EDITOR_TOURNAMENT_TYPE_MANAGER


Connection Stuff:
    CONNECTION_ACCEPTED
    CONNECTION_REJECTED
    CONNECTION_CLOSED


CLIENT:

    participant
    editor
    
